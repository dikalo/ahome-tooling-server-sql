/*
 * Copyright (c) 2014,2015 Ahome' Innovation Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('org.ajoberstar:grgit:1.1.0')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'groovy'
apply plugin: 'maven'

sourceCompatibility = 1.7

version = '1.0.51-SNAPSHOT'

group = 'com.ahome-it'

task('deleteConfigs', type: Delete) {
    FileTree tree = fileTree (dir: 'build/resources/main');
    tree.each { File file ->
        delete(file)
    }
}

task('filterConfigs', dependsOn: deleteConfigs, type: Copy) {
    from sourceSets.main.allSource
    into 'build/resources/main'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

jar.dependsOn(filterConfigs)

jar {
    manifest {
        attributes 'Implementation-Title': 'Ahome-Tooling-Server-SQL', 'Implementation-Version': version
    }
}

def getFilterTokens() {
    [GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try
    {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e)
    {
        "localhost"
    }
}

def getJavaVersion() {
    String java = System.getProperty('java.version')
    if (java)
    {
        return java
    }
    'unknown'
}

def getBuildUser() {
    String user = System.getProperty('user.name')
    if (user)
    {
        return user
    }
    'unknown'
}

def getBuildServerBuild() {
    String name = System.getProperty('BUILD_DISPLAY_NAME')
    if (name)
    {
        return name
    }
    'unknown'
}

def getBuildGITCommitHash() {
    def grgit = Grgit.open(project.file('.'))
    grgit.head().id
}

def getBuildGITCommitUser() {
    def grgit = Grgit.open(project.file('.'))
    grgit.head().committer.email
}

def getBuildGITCommitMessage() {
    def grgit = Grgit.open(project.file('.'))
    grgit.head().shortMessage
}

repositories {
    mavenCentral()
    maven { url "${sonatype_snapshotURL}" }
}

sourceSets {
  main {
    resources {
      source groovy
    }
  }
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

configurations {
    compile.exclude(group: 'org.slf4j', module: 'log4j-over-slf4j')
}

dependencies {
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-core', version: '1.0.43-SNAPSHOT')
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${sonatype_snapshotURL}") {
                authentication(userName: "${sonatype_user}", password: "${sonatype_password}")
            }
        }
    }
}