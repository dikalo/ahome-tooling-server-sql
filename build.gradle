/*
 * Copyright (c) 2014,2015 Ahome' Innovation Technologies. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.3.0')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress

import org.ajoberstar.grgit.Grgit

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'jacoco'
apply plugin: 'signing'

sourceCompatibility = 1.8

targetCompatibility = 1.8

version = '1.0.111-RELEASE'

group = 'com.ahome-it'

task('deleteConfigs', type: Delete) {
    FileTree tree = fileTree (dir: 'build/resources/main')
    tree.each { File file ->
        delete(file)
    }
}

task('filterConfigs', dependsOn: deleteConfigs, type: Copy) {
    from sourceSets.main.allSource
    into 'build/resources/main'
    filter(FixCrLfFilter)
    filter(ReplaceTokens, tokens: getFilterTokens())
}

task doJavaDocs(type: Groovydoc) {
    source = sourceSets.main.allSource
    classpath = sourceSets.main.runtimeClasspath
    destinationDir = file('build/docs/javadoc')
    docTitle = "${getProjectCommonName()}"
    footer = "<small><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - ${getBuildModuleVersion()} - Author: Dean S. Jones</a></small>"
    includes = ['com/ait/tooling/server/sql/**']
    getGroovydocLinks().each { name, list ->
        link(name, *list)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

compileJava.dependsOn(clean)

jar.dependsOn(filterConfigs)

jar {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def getProjectArtifactID() {
    'ahome-tooling-server-sql'
}

def getProjectTitle() {
    'Ahome-Tooling-Server-SQL'
}

def getProjectCommonName() {
    'Ahome Tooling Server SQL'
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try
    {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e)
    {
        "localhost"
    }
}

def getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def getBuildServerBuild() {
    System.getProperty('BUILD_DISPLAY_NAME') ?: 'Command line ' + GradleVersion.current().toString()
}

def getBuildGITHomeURL() {
    'https://github.com/ahome-it/' + getProjectArtifactID()
}

def getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        resources { source groovy }
    }
    test {
        resources { source groovy }
    }
}

task codeCoverage << {
    println "Finished tests and code coverage."
}

codeCoverage.dependsOn jacocoTestReport

jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
        html.destination 'build/reports/coverage'
    }
}

jacocoTestReport.dependsOn test

test {
    jacoco {
        append = false
        destinationFile = file("build/jacoco/testing.exec")
        classDumpFile = file("build/jacoco/classpathdumps")
    }
}

tasks.withType(GroovyCompile) {
    groovyOptions.optimizationOptions.indy = true
}

dependencies {
    compile(group: 'com.ahome-it', name: 'ahome-tooling-server-core', version: '1.0.111-RELEASE')
    testCompile(group: 'log4j', name: 'log4j', version: '1.2.17')
    testCompile(group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.12')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            repository(url: "${sonatype_stageingURL}") {
                authentication(userName: "${sonatype_user}", password: "${sonatype_password}")
            }
            pom.project {
                name 'Ahome-Tooling-Server-SQL'
                packaging 'jar'
                description 'Ahome Tooling Server SQL'
                url 'https://github.com/ahome-it/ahome-tooling-server-sql'
                scm {
                    url 'scm:git@github.com:ahome-it/ahome-tooling-server-sql.git'
                    connection 'scm:git@github.com:ahome-it/ahome-tooling-server-sql.git'
                    developerConnection 'scm:git@github.com:ahome-it/ahome-tooling-server-sql.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'http://www.lienzo-core.com'
                    }
                }
            }
        }
    }
}

def Map<String, List<String>> getGroovydocLinks() {
    def lmap = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if (data.exists()) {
        data.eachLine { line ->
            def vals = ((CharSequence) line).tokenize(',')
            lmap[vals.head()] = vals.tail()
        }
    }
    lmap
}

task(buildGroovydocLinks) << {
    def site = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            site[line] = ((CharSequence) new URL("${line}/package-list").text).tokenize('\n')
        }
    }
    File make = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if(make.exists()) {
        make.delete()
    }
    make.createNewFile()
    def save = make.newPrintWriter()
    site.each { link, list ->
        def show = "${link}"
        list.each { line ->
            show = "${show},${line}"
        }
        save.println("${show}")
    }
    save.flush()
    save.close()
}